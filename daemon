#!/usr/bin/env python3
import logging
import os
import sys
import time

import libvirt

VFIO_VM_NAME = os.getenv("VFIO_VM_NAME")
IDLE_VM_NAME = os.getenv("IDLE_VM_NAME")

logger = logging.getLogger(__name__)
logging.basicConfig(stream=sys.stdout, level=logging.INFO)

logger.info(f"VFIO_VM_NAME:{VFIO_VM_NAME}")
logger.info(f"IDLE_VM_NAME:{IDLE_VM_NAME}")

if VFIO_VM_NAME is None or IDLE_VM_NAME is None:
    logger.error(
        f"The following variable(s) are not set: {'VFIO_VM_NAME' if VFIO_VM_NAME is None else ''} {'IDLE_VM_NAME' if IDLE_VM_NAME is None else ''}"
    )
    sys.exit(1)

try:
    conn = libvirt.open("qemu:///system")
except libvirt.libvirtError:
    logger.error("Failed to open connection to the hypervisor")
    sys.exit(1)

try:
    vfio_vm = conn.lookupByName(VFIO_VM_NAME)
except libvirt.libvirtError as e:
    logger.error(e)
    sys.exit(1)

try:
    idle_vm = conn.lookupByName(IDLE_VM_NAME)
except libvirt.libvirtError as e:
    logger.error(e)
    sys.exit(1)

boot_vfio_next = False


while True:
    # See https://libvirt.org/html/libvirt-libvirt-domain.html#virDomainState
    # for the meaning of state values

    # state() returns `state` and `reason`, only the former is useful to us
    vfio_vm_state = vfio_vm.state()[0]
    idle_vm_state = idle_vm.state()[0]

    if vfio_vm_state == 5 and idle_vm_state == 5:
        try:
            # If both VMs are shut off, boot the next VM in the rotation
            if boot_vfio_next:
                vfio_vm.create()
            else:
                idle_vm.create()
            boot_vfio_next = not boot_vfio_next
        except libvirt.libvirtError as e:
            logger.error(e)
    # Assume that both VMs cannot be up at the same time
    elif vfio_vm_state == 1:
        boot_vfio_next = False
    elif idle_vm_state == 1:
        boot_vfio_next = True

    time.sleep(5)
